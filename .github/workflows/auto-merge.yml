name: Auto Merge Dependabot PRs to Develop

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'binon'

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        
      - name: Set up GitHub CLI
        run: |
          # Install GitHub CLI (gh)
          sudo apt-get update
          sudo apt-get install gh

          # Authenticate GitHub CLI using the provided token
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          
      - name: Wait for CI workflow to pass (Ensure CI workflow succeeded)
        id: wait_for_ci
        run: |
           PR_NUMBER=${{ github.event.pull_request.number }}
            echo "Checking CI status for PR #$PR_NUMBER"
            
            # Fetch the check runs associated with the PR to ensure CI passed before proceeding with merge
            CI_STATUS=$(gh pr view $PR_NUMBER --json statusCheckRollup)
            
            # Log the CI_STATUS for debugging purposes
            echo "CI Status Response: $CI_STATUS"
            
            # Flag to track if all checks passed
            ALL_CHECKS_PASSED=true
  
            # Iterate over the check runs and check if all are successful
            for check in $(echo "$CI_STATUS" | jq -r '.statusCheckRollup[] | @base64'); do
              _jq() {
                echo ${check} | base64 --decode | jq -r ${1}
              }
  
                status=$(_jq '.status')
                conclusion=$(_jq '.conclusion')
                check_name=$(_jq '.name')
              
                # Log check details
                echo "Check: $check_name, Status: $status, Conclusion: $conclusion"
              
                # If the check is still in progress, skip it
                if [[ "$status" == "IN_PROGRESS" ]]; then
                  echo "Check '$check_name' is still in progress, skipping."
                  continue
                fi
              
                # If any check fails, set ALL_CHECKS_PASSED to false and break the loop
                if [[ "$conclusion" != "SUCCESS" ]]; then
                  ALL_CHECKS_PASSED=false
                  break
                fi
              done
  
            if [[ "$ALL_CHECKS_PASSED" == "false" ]]; then
              echo "CI failed, aborting merge."
              exit 1
            fi
          
      - name: Check Target Branch and PR Title
        id: check_branch
        run: |
          PR_TITLE='${{ github.event.pull_request.title }}'
          echo "Original PR Title: $PR_TITLE"
          
          # Escape problematic quotes
          ESCAPED_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g')
          echo "Escaped PR Title: $ESCAPED_TITLE"

          if [[ "$ESCAPED_TITLE" =~ ([0-9]+\.[0-9]+\.[0-9]+).*to.*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            # Extract version numbers
            OLD_VERSION="${BASH_REMATCH[1]}"
            NEW_VERSION="${BASH_REMATCH[2]}"
            echo "Version change detected: $OLD_VERSION to $NEW_VERSION"
            
            # Split version into major, minor, patch components
            OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d '.' -f1)
            OLD_MINOR=$(echo "$OLD_VERSION" | cut -d '.' -f2)
            OLD_PATCH=$(echo "$OLD_VERSION" | cut -d '.' -f3)
            
            NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d '.' -f1)
            NEW_MINOR=$(echo "$NEW_VERSION" | cut -d '.' -f2)
            NEW_PATCH=$(echo "$NEW_VERSION" | cut -d '.' -f3)
            
            # Check if it's a minor or patch update
            if [[ "$OLD_MAJOR" == "$NEW_MAJOR" ]] && [[ "$OLD_MINOR" == "$NEW_MINOR" ]] && [[ "$NEW_PATCH" -gt "$OLD_PATCH" ]]; then
              echo "Patch update detected"
              echo "should_merge=true" >> $GITHUB_ENV
            elif [[ "$OLD_MAJOR" == "$NEW_MAJOR" ]] && [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]; then
              echo "Minor update detected"
              echo "should_merge=true" >> $GITHUB_ENV
            else
              echo "No minor/patch update detected"
              echo "should_merge=false" >> $GITHUB_ENV
            fi
          else
            echo "No version change detected"
            echo "should_merge=false" >> $GITHUB_ENV
          fi

      - name: Debug Context
        uses: actions/github-script@v6
        with:
          script: |
            console.log("Target branch:", context.payload.pull_request.base.ref);

      - name: Check if Should Merge
        run: |
          echo "DEBUG: should_merge=${{ env.should_merge }}"
          if [[ "${{ env.should_merge }}" == "true" ]] && [[ "${{ github.event.pull_request.base.ref }}" == "master" ]]; then
            echo "DEBUG: should merge PR"
            echo "should_merge=true" >> $GITHUB_ENV
          else
            echo "DEBUG: skip merge"
            echo "should_merge=false" >> $GITHUB_ENV
          fi

      - name: Merge Pull Request
        if: ${{ env.should_merge == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: "squash"
            });
